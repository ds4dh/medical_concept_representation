[run]
  # Possible models: 'fasttext', 'glove', 'elmo',
  #                  'bert', 'bert_classifier', 'transformer'
  model_used = 'fasttext'
  model_id = 'test'
  model_version = 0  # bert_classifier uses pretrained bert from same version
  ngram_min_len = 0  # 0 for word encoding, > 0 for subword encoding
  ngram_max_len = 0  # 0 for word encoding, > 0 for subword encoding
  debug = true
  load_model = false  # note: changing ngram_len will change embedding layer
  load_tokenizer = true  # TODO: implement this
  num_workers = 0  # TODO: check for potential issues with iter-style dataset for num_workers > 0
  pin_memory = false

[data]
  data_dir = './data/datasets/json'  # /json, /reagent_pred
  data_subdir = 'time_not_categorized'  # time_not_categorized, smiles
  log_dir = './logs'
  max_seq_len = 512

[train]
  lr = 2.0
  optimizer = 'adam'  # adam, adamw
  adam_betas = [0.9, 0.998]  # momentum
  adam_lambda = 0.01  # weight decay (only for adamw optimizer)
  accumulate_grad_batches = 1
  max_tokens_per_batch = 4096
  n_steps = 500000
  n_warmup_steps = 10000

[models]
  [models.fasttext]
    task = 'skipgram'
    input_keys = ['center']
    label_keys = ['context']
    d_embed = 256
    [models.fasttext.special_tokens]
      '[PAD]' = 0
      '[UNK]' = 1

  [models.glove]
    task = 'cooc'
    input_keys = ['left', 'right']
    label_keys = ['cooc']
    d_embed = 256
    [models.glove.special_tokens]
      '[PAD]' = 0
      '[UNK]' = 1
  
  [models.elmo]
    task = 'lm'
    input_keys = ['sequence']
    label_keys = ['sequence']
    d_convs = [512, 512, 512, 512]
    k_sizes = [2, 3, 4, 5]  # should be ngram_len lists?
    d_embed_char = 256
    d_embed_word = 256
    n_lstm_layers = 2
    dropout = 0.5
    [models.elmo.special_tokens]
      '[PAD]' = 0
      '[UNK]' = 1
      '[CLS]' = 2
      '[SEP]' = 3
      '[END]' = 4
  
  [models.transformer]
    task = 'reagent_pred_mt'  # could add 'mt' here
    input_keys = ['src', 'tgt']  # 'tgt' present for teacher forcing
    label_keys = ['tgt']
    share_embeddings = true
    n_enc_layers = 4
    n_dec_layers = 4
    d_embed = 256
    d_ff = 2048
    n_heads = 8
    dropout = 0.1
    [models.transformer.special_tokens]
      '[PAD]' = 0
      '[UNK]' = 1
      '[CLS]' = 2
      '[SEP]' = 3
      '[END]' = 4

  [models.bert]
    task = 'mlm'  # 'mlm', 'reagent_pred_mlm'
    input_keys = ['masked']
    label_keys = ['masked', 'target']  # 'masked' present to get mask indices
    n_layers = 4
    d_embed = 256
    d_ff = 2048
    n_heads = 8
    dropout = 0.1
    [models.bert.special_tokens]
      '[PAD]' = 0
      '[UNK]' = 1
      '[CLS]' = 2
      '[SEP]' = 3
      '[END]' = 4
      '[MASK]' = 5

  [models.bert_classifier]
    # If load_pretrained_bert is true, the version number, model_id, ngram min
    # and max length will be used to identify which weights of bert are loaded.
    task = 'reagent_pred_cls'  # could add 'cls' here
    input_keys = ['sample']
    label_keys = ['label']
    n_classes = 0  # 0: all reagents, > 0: most popular reagents
    load_pretrained_bert = false
    bert_grad_type = 'norm'  # 'none', 'norm', 'all' (weights tuned in bert)
